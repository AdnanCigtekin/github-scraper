/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//TODO: Implement tests for this library
package githubscrapertest;

import org.junit.Test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

import githubscraper.core.ScrapeExecutor;
import githubscraper.requestoperation.ContributionCalendar;
import githubscraper.requestoperation.ContributionCount;
import githubscrapertest.helpers.utility;

import static org.junit.Assert.*;

import java.io.IOException;

public class ScraperTest {

    
    @Test
    public void contributionCountBasicTest() {
    	ContributionCount cmtCount = new ContributionCount();
    	ScrapeExecutor executor = new ScrapeExecutor("AdnanCigtekin");
    	executor.addOperation(cmtCount);
    	String res = executor.executeAll();
    	assertNotNull(res);
    }
  
    @Test
    public void contributionCountValueTest() {
    	ContributionCount cmtCount = new ContributionCount();
    	ScrapeExecutor executor = new ScrapeExecutor("AdnanCigtekin");
    	executor.addOperation(cmtCount);
    	String res = executor.executeAll();
    	
        ObjectMapper mapper = new ObjectMapper();
        try {
			JsonNode actualObj = mapper.readTree(res);
			JsonNode commitCount = actualObj.get("contribution-count");
			if(utility.IsInteger(commitCount.textValue())) {
				assert(true);
			}else {
				assert(false);
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			assert(false);
		}
    	
    }
    
    @Test
    public void contributionCalenderBasicTest() {
    	ContributionCalendar cntCal = new ContributionCalendar();
    	ScrapeExecutor executor = new ScrapeExecutor("AdnanCigtekin");
    	executor.addOperation(cntCal);
    	String res = executor.executeAll();
    	assertNotNull(res);
    }
    
    @Test
    public void contributionCalendarValueTest() {
    	ContributionCalendar cntCal = new ContributionCalendar();
    	ScrapeExecutor executor = new ScrapeExecutor("AdnanCigtekin");
    	executor.addOperation(cntCal);
    	String res = executor.executeAll();
    	
        ObjectMapper mapper = new ObjectMapper();
        try {
			JsonNode actualObj = mapper.readTree(res);
			ArrayNode contributionCalendar = (ArrayNode) actualObj.get("contribution-calendar");
			
			JsonNode emptyArr = mapper.readTree("{ \"contribution-calendar\" : []}");
			ArrayNode emptyArrVal = (ArrayNode) emptyArr.get("contribution-calendar");
			
			if(!contributionCalendar.equals(emptyArrVal)) {
				assert(true);
			}else {
				assert(false);
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			assert(false);
		}
    	
    }
    
    @Test
    public void AllBasicTest() {
    	ContributionCount cmtCount = new ContributionCount();
    	ContributionCalendar cntCal = new ContributionCalendar();
    	ScrapeExecutor executor = new ScrapeExecutor("AdnanCigtekin");
    	executor.addOperation(cmtCount);
    	executor.addOperation(cntCal);
    	String res = executor.executeAll();
    	assertNotNull(res);
    }
    
    
}
